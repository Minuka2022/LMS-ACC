<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="imageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="imageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAAAe
        DwAAAk1TRnQBSQFMAgEBBQEAAQgBAAEIAQABGAEAARgBAAT/ARkBAAj/AUIBTQE2BwABNgMAASgDAAFg
        AwABMAMAAQEBAAEYBgABNioAA+YDLgwAAy4D5v8ACQADWAMAAzYGNwM2AwADWP8ABgAD/gMQAyQMAAMk
        AxAD/vMAA/4DuwOYA+ED/gPKAwADcgwAA3IDAAPKA/4D4QOYA7sD/uQAA68JAAMEAwADBwPmDAAD5gMH
        AwADBAkAA6/hAAP1Aw8DFAPPA3oDNgNpA+USAAPlA2kDNgN6A84DFgMPA/XeAAN/AwADuDAAA7kDAAN/
        2wAD5gMAAzcD/Q8AA/4D1AacA9MD/g8AA/0DNwMAA+bYAAOYAwADwg8AA/UDRAwAA0ID9Q8AA8IDAAOY
        2AADzQMAAxQD3gkAA/4DQgMAA3MG3ANzAwADRAP+CQAD3gMUAwADzdsAA74DBQMUA/gGAAPTAwADcwP/
        BgAD/wNzAwAD0wYAA/gDFAMFA77hAAOiAwADzgYAA5wDAAPcDAAD3AMAA5wGAAPOAwADo+QAA6MDAAPO
        BgADnAMAA9wMAAPcAwADnAYAA84DAAOj4QADvgMFAxID+AYAA9MDAANzA/8GAAP/A3MDAAPTBgAD+AMS
        AwUDvtsAA84DAAMUA94JAAP+A0IDAANzBtwDcwMAA0ID/gkAA94DFAMAA83YAAOYAwADwg8AA/UDQgwA
        A0ID9Q8AA8IDAAOY2AAD5gMAAzcD/Q8AA/4D0wacA9MD/g8AA/0DNwMAA+bbAAN/AwADuTAAA7kDAAN/
        3gAD9QMPAxQDzwN6AzYDaQPlEgAD5QNpAzYDegPOAxYDDwP14QADrwkAAwQDAAMHA+YMAAPmAwcDAAME
        CQADr+QAA/4DuwOYA+ED/gPKAwADcgwAA3IDAAPKA/4D4QOYA7sD/vMAA/4DEAMkDAADJAMQA/7/AAYA
        A1gDAAM2BjcDNgMAA1j/AAkAA+YDLgwAAy4D5vAAA8cDFBUAAxQDxwYAA8cDFBUAAxQDxwNhG3gDdwZv
        A3cbeANhGwAD+wPIBlMDyAP7GwAD+QPnA+YD7AP/CQAD/wPRA1wDXwONA+4eAAMUA2IVtQNiAxYG/wMW
        A2IVtQNiAxQDeAPqG6kGmBupA+oDeBIAA/8D5wONA2IDyQbAA8gDYgONA+cD/xIAA1gGtQOJA8sGAAP5
        A30DrwP9AwAD8QOPA3oD7RsAA7QVAAO1AwUG/gMFA7QVAAO1AwADjwO8A6sD7w/yA9kDbwMAAxIDbwPZ
        D/ID7wOrA7wDeAwAA/sDvANZA58D7wYABs4GAAPvA58DWAO8A/sMAANoA90D9gPnAzkDYwNlA2sD6w8A
        A/QDiQOGA/UVAAO0FQADtQMFBv4DBQO0FQADtQYAA7wDkwN7A3UDfQODA3gDcwOiA58DHAPNA6IDBwM5
        A3gDgwN9A3QDewOTA7wDeAwAA9cDnQP9DAAGzgwAA/0DnQPXDAADaAYAA+cDtBUAA+QD1QP+AwAD7gNy
        A6QD+w8AA7QVAAO1AwUG/gMFA7QVAAO1AwAD1QO8A+kGAAP+A/0D/wMAA+cDfwNlA9UDAAP0A5wDcAOs
        A94D8gP5A+kDvAN4CQAD9gNhA4oD/gwABs4MAAP+A4oDYQP2CQADaAYAA+cDtA8AA/IDeAOiA7EDlQP6
        BgAD3gNcA8cD/gkAA7QVAAO1AwUG/gMFA7QVAAO1AwADeAO8A+kPAAPZA3sD8gMcA9UJAAP+A+oDxwOp
        A0ID4QO8A3gJAAO3A9YDsAPHDAAGzgwAA8cDsAPWA7cJAANoBgAD5wO0DAAD/QOKA/IDAAPSA3IDdwN1
        A9AD/AP+A70DnwkAA7QVAAO1AwUD/gP/AxYDYhW0A2IDFAN4A7wD6QkAA/gDkwOnA/4DiwOrA9UVAAON
        A98DvAN4CQADswbkA6kMAAbODAADqQbkA7MJAANoBgAD5wOyEgAD6QNyA6ID/AMAA/oDyANtA4ADtwOP
        CQADtBUAA7UDBQP+AwADxwMWFQUDFgPHA3gDvAPpA/4D0gOIA4UD7gMAA7kDvAbVFQADjQPfA7wDeAkA
        A9kDYgNWA/UGAAP5A78GVQO/A/kGAAP1A1YDYgPZCQADWAa0A4gDRwOfA/UDAAP/A+ADcgOYA/YDAAPa
        A90JAAP3A94D/QkAA7QVAAO1AwUD/gYAA/8V/gP/AwADeAO8A+kD9gN6A/oD/wPrA4IDwQMABtUVAAON
        A98DvAN4DAADzAPGA/4D4QOAA2sDZQP8A/0DZQNrA4AD4QP+A8YDzAwAA/kG5wPsA/8D5wOFA2MDXQOv
        A/gGAAP5AxwDXQNoA4kDzAP7DwADtBUAA7UDBQP+BgAD/xX+A/8DAAN4A7wD6QP2A58DAAN6A64D9gYA
        BtUVAAONA98DvAN4DAAD1wNhA1MDqQPzA/QDKAafAygD9APzA6kDUwNhA9czAAP+A6YDnQP/A/cDzQNh
        A8QD/wkAA7QVAAO1AwUD/gMAA8cDFhUFAxYDxwN4A7wD6QP2A58DAAN4DAAG1RUAA40D3wO8A3gMAAPu
        A8wDVQPYA/YDuQPQBkAD0AO5A/YD2ANVA8wD7jYAA/8D8QP1A/4DAAP+A7YDkQP/BgADtBUAA7UDBQP+
        A/8DFgNiFbUDYgMUA3gDvAPpA/YDnwMAA3gMAAbVFQADjQPfA7wDeBIAA/gDvAOEA0QDJQaJAyUDRAOE
        A7wD+DYAA/8DxANdA4oDkwNiA6ED+wMAA78DtAMAAxQDYhW0A2IDFgP/A/4DBQO0FQADtQMAA3gDvAPp
        A/YDnwMAA3gMAAbVFQADjQPfA7wDeBsAA8cDWQa+A1kDxzwAA/8DiAO+A/4JAAPhA2ID+gP/A3MD9QPH
        AxYVBQMWA8cDAAP+AwUDtBUAA7UDAAN4A7wD6QP2A58DAAN4DAAG1RUAA8gD5AO8A3gYAAPhA4YD/gYA
        A/4DhgPhOQADxwO9BgAD5wO9BgAD6gOGAwAD5wOnAwAD/xX+A/8GAAP+AwUDtBUAA7UDAAN4A7wD6QP2
        A58DAAN4DAAG1RgAA+kDvAN4FQAD/QNmA/kMAAP5A2YD/TYAA18D/gMAA+sDZQONA7kGAAOCA/cD/wNl
        AwAD/xX+A/8GAAP+AwUDtBUAA7UDAANZA4UD6QP2A58DAAN4DAAG1RUAA7YD4wOFA1kVAANsAzoSAAM6
        A2wzAAP6A4AGAAPrA/UD7wNrBgADxwPZAwADZgPHAxYVBQMWA8cDAAP+AwUDtBUAA7UDAAPrA68DdAO6
        A58DAAN4DAAD0wNbA/gSAAONA2kDrwPrEgAD/gNGA1kSAANZA0YD/jAAA/gDiAYAA9wDXwOdA+8GAAPM
        A9UDAANoAxQDYhW1A2IDFgP/A/4DBQO0FQADtQkAA/sDyQOfAwADeAwAA70DzANwA8QD/QwAA40D9xgA
        A/4DJgMkA8ID+QMAA/wDzAOkAyIDJgP+MAAD/wNfBgADuwPTA/QDlAYAA5gD8AMAA2MDAAO0FQADtQMF
        Bv4DBQO0FQADtQwAA/YDnwMAA3gMAAOEA/wD/wPTA20DpAPkA/sDAAONA/sYAAP+A2gD8APTA1wDvQNW
        A8cD7APxA2gD/jMAA6kD2wMAA/wDfQNQA/QDAAP3A2kDAAPyA5EDAAO0FQADtQMFBv4DBQO0FQADtQwA
        A/YDnwMAA3gJAAP8A3sMAAPwA78DigN3A2ED/RgAA/4DYwYAA/0DiAP4CQADaAP+MwAD/ANjA+gDAAP5
        A+sDAAP3A2MD8AMAA5UD6gMAA7QVAAO1AwUG/gMFA7QVAAO1DAAD9gOfAwADeAkAA7ED4DkAA1wD/hUA
        A1kD/zYAA/sDiQN/A8cDzAOaA2kD8AMAA+IDigYAA7QVAAO1AwUG/gMFA7QVAAO1DAAD9gOEA8MDQAYA
        A+MDjjwAA8QDuw8AA/sDnwOrPwAD9wPZA9UD8AYAA+IDaAP8AwADFANiFbQDYgMWBv8DFgNiFbQDYgMU
        CQAD/AOjA94DcgP9A7sDiQP9PAAD/gOAA7kD/QYAA+0DXAPXA/9LAAPyA5UDigP8BgADxwMUFQADFAPH
        BgADxwMUFQADFAPHEgADcgN4A9kD/0IAA/4DxwNfA10DWQOKA/RIAAP0A2gDYwOTA+oMAAFCAU0BPgcA
        AT4DAAEoAwABYAMAATADAAEBAQABAQUAAUABAhYAA/8BAAH/AQAB/wkAAf8BAAH/CQAB/gE8AX8JAAHA
        ATwBAwkAAcABPAEDCQABgAF+AQEJAAGPAf8B8QkAAQ8BgQHwCQABHwEAAfgJAAEOAQABcAkAAYYBGAFh
        CQABxgE8AWMJAAHGATwBYwkAAYYBGAFhCQABDgEAAXAJAAEfAQAB+AkAAQ8BgQHwCQABjwH/AfEJAAGA
        AX4BAQkAAcABPAEDCQABwAE8AQMJAAH+ATwBfwkAAf8BAAH/CQAB/wEAAf8KAAEYBAAB/wGBAf8BBwED
        Af8GAAH8AQABPwEGARAB/wE/AYEB/AMAAfABZgEPAQABfAI/AYEB/AGAAgAB8QHnAY8BZwHxAQ8BPwGB
        AfwBGAGEAQAB4QHnAYcBZwHAAcMBPwGBAfwBHwEHAQAB4QHnAYcBZwGIAQMBPwGAAQABHAEHAfAB4QHn
        AYcBZwHhAQMBPwGIAgABhwHwAeEBgQGHAQEBBAHjAT8BjAEBAQABJwLwAQABDwEAARgBDwE/AYwBAQEE
        AWcC8AEAAQ8B/wH4AQMBPwGIAQABBQHnAvABAAEPAf8B/AEhAT8BgAEAAQUB5wHwAfwBAAE/Af8B8AEJ
        AQABAQH8AQUB5wHwAf8BgQL/AeEBwAEAAREB/AEFAecB8AH/ARgC/wHmAWQBgAExAfwBBQHnAfgB/gE8
        AX8B/wHkATABgAExAfwBBQHnAfAB/gF+AX8B/wHMATIBAAERAfwBBQHjAfAB/AF+AT8B/wHMATIBAAEB
        AfwBxQHgAfMB/AEQAT8B/wHMATIBPwGBAfwB5QHgARMB/AEAAT8B/wHkASQBPwGBAfwB5QHPAQMB/AHH
        AT8B/wHiAUQBPwGBAfwB5QHPAf8B/gF/AT8B/wHwAQkBPwGBAfwB4QGfAf8B/gF8AX8B/wH8ATEDAAHg
        AR8B/wH+ARgBfwL/AcMBAAEYAQAB/AE/Av8BAQL/Af4BDws=
</value>
  </data>
</root>